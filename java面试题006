题目：解释 Java 中的异常机制。区别 Checked Exception 和 Unchecked Exception。
答案：
1. 异常机制概述
Java 的异常处理机制使用了 try-catch 语句来捕获异常，确保程序在运行时出现问题时能够正常处理并避免崩溃。异常分为两大类：受检异常（Checked Exception） 和 未经检验的异常（Unchecked Exception）。

异常（Exception）：Java 中的异常是 Throwable 类的子类，分为 Error 和 Exception。
Error：通常是 JVM 级别的错误，如内存溢出、栈溢出等。通常不需要处理。
Exception：是程序逻辑中可能出现的错误，可以进行捕获和处理。
2. Checked Exception（受检异常）
定义：Checked Exception 是指在编译时必须显式处理的异常，通常会在方法签名中声明，或者通过 try-catch 块来捕获。

特点：

这些异常是编译器强制要求处理的。
如果方法中抛出了 Checked Exception，必须使用 try-catch 或 throws 声明来处理或声明该异常。
常见的 Checked Exception 包括：IOException、SQLException、ClassNotFoundException 等。
代码示例：

java
复制代码
import java.io.*;

class CheckedExceptionExample {
    public void readFile() throws IOException {
        FileReader file = new FileReader("file.txt");  // 可能会抛出 IOException
        BufferedReader fileInput = new BufferedReader(file);
        throw new IOException("Test checked exception");
    }

    public static void main(String[] args) {
        CheckedExceptionExample example = new CheckedExceptionExample();
        try {
            example.readFile();  // 必须捕获或声明
        } catch (IOException e) {
            System.out.println("Caught IOException: " + e.getMessage());
        }
    }
}
总结：Checked Exception 需要显式捕获或声明。编译器在编译时会检查代码中是否处理了这些异常。如果没有处理，编译器会报错。
3. Unchecked Exception（未经检验异常）
定义：Unchecked Exception 是指那些在编译时不强制要求处理的异常，通常是程序逻辑错误或不正确的输入导致的异常。
特点：
这些异常不需要在代码中进行显式处理。
也就是说，即使方法中可能抛出这些异常，编译器也不会强制要求你处理。
常见的 Unchecked Exception 包括：NullPointerException、ArrayIndexOutOfBoundsException、ArithmeticException、IllegalArgumentException 等。
代码示例：
java
复制代码
class UncheckedExceptionExample {
    public void divide(int a, int b) {
        System.out.println(a / b);  // 可能抛出 ArithmeticException
    }

    public static void main(String[] args) {
        UncheckedExceptionExample example = new UncheckedExceptionExample();
        example.divide(10, 0);  // 运行时错误，无需显式处理
    }
}
总结：Unchecked Exception 不需要显式捕获或声明，通常是程序逻辑错误，应该通过合理的代码设计避免或捕获。
4. Checked Exception 与 Unchecked Exception 的区别：
特性	Checked Exception	Unchecked Exception
定义	在编译时检查并强制要求处理的异常	在编译时不强制要求处理的异常
继承自	继承自 Exception（但不继承自 RuntimeException）	继承自 RuntimeException
处理方式	必须通过 try-catch 或 throws 显式声明处理	可选，不需要显式处理
常见例子	IOException、SQLException、ClassNotFoundException	NullPointerException、ArithmeticException
编译器检查	编译时检查，若未处理则报错	编译时不检查
应用场景	用于需要程序处理的外部系统错误，如文件操作、数据库操作等	用于程序错误，如逻辑错误、非法参数等
5. 总结
Checked Exception：编译器要求显式处理的异常。适用于那些不可预测的外部情况，如文件读写、数据库连接等。
Unchecked Exception：不需要强制处理的异常，通常是程序错误或不合理的输入。它们通常反映了代码设计或使用错误，通常在运行时出现。
