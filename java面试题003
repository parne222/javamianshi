题目：synchronized 和 Lock 的区别
问题描述：
请解释 synchronized 和 Lock 的区别，以及它们在并发编程中的应用场景。

答案：
1. synchronized 与 Lock 的区别：
synchronized：

是 Java 中的一种同步机制，用于控制对共享资源的访问。
可以用在方法或代码块上，确保同一时刻只有一个线程能够访问被同步的代码块或方法。
是 内置锁，每个对象都有一个监视器锁（monitor lock），当线程进入同步代码块时，它会自动获取对象的锁，执行完代码块后自动释放锁。
自动释放锁：即使发生异常，synchronized 也能确保锁被释放。
synchronized 不支持 尝试锁定、中断 或 公平锁 等高级功能。
Lock：

是 java.util.concurrent.locks 包下的接口，用于替代传统的 synchronized 关键字提供更灵活的并发控制。
例如，ReentrantLock 是 Lock 接口的常用实现，它提供了显式的加锁和解锁机制。
支持 尝试加锁 (tryLock())、中断响应 (lockInterruptibly()) 和 公平锁 等功能。
手动释放锁：需要显式地调用 unlock() 方法释放锁，避免死锁问题。
2. synchronized 与 Lock 的比较：
特性	synchronized	Lock
锁的获取方式	隐式（自动获取和释放）	显式（手动获取和释放）
锁的粒度	只能锁定方法或代码块	可以精确控制锁的范围和时机
公平性	不支持	ReentrantLock 可以实现公平锁
中断响应	不支持（线程阻塞时不能中断）	支持通过 lockInterruptibly() 方法响应中断
超时锁定	不支持	支持通过 tryLock() 方法尝试加锁
可能导致死锁的风险	在 synchronized 代码块中，如果发生异常，锁会被自动释放	需要开发人员显式释放锁，若未释放可能导致死锁
3. 使用场景：
synchronized：

当需要对方法或代码块进行简单的同步控制时，synchronized 是最简便的选择。
它适用于临界区非常简单，不需要复杂的锁管理（如尝试锁、锁中断等）的情况。
适合较小的并发场景，代码逻辑较简单的并发同步。
Lock：

当需要更灵活的锁管理，如尝试加锁、支持中断、支持公平锁等时，Lock 是更好的选择。
适用于复杂的并发控制需求，特别是多线程环境下需要更高性能和更精细控制的场景。
4. 代码示例：
synchronized 示例：
java
复制代码
public class SynchronizedExample {
    private int counter = 0;

    public synchronized void increment() {
        counter++;
    }

    public synchronized int getCounter() {
        return counter;
    }

    public static void main(String[] args) {
        SynchronizedExample example = new SynchronizedExample();
        example.increment();
        System.out.println(example.getCounter());
    }
}
Lock 示例（使用 ReentrantLock）：
java
复制代码
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class LockExample {
    private int counter = 0;
    private Lock lock = new ReentrantLock();

    public void increment() {
        lock.lock(); // 显式加锁
        try {
            counter++;
        } finally {
            lock.unlock(); // 确保释放锁
        }
    }

    public int getCounter() {
        return counter;
    }

    public static void main(String[] args) {
        LockExample example = new LockExample();
        example.increment();
        System.out.println(example.getCounter());
    }
}
总结：
synchronized 适用于简单的并发控制，不需要额外的灵活性。
Lock 提供了更多的控制功能，如中断响应、尝试加锁和公平锁，适用于需要更多并发控制的复杂场景。
