题目：解释 Java 中的 synchronized 关键字及其作用？
答案：
1. 什么是 synchronized 关键字？
synchronized 是 Java 中的一个关键字，用于控制对共享资源的访问，确保同一时刻只有一个线程可以执行被 synchronized 修饰的代码块或方法，防止多个线程同时访问共享资源而导致数据不一致或线程安全问题。

synchronized 主要用于保证线程安全，防止多个线程在访问共享资源时发生冲突或产生不一致的结果。

2. synchronized 的作用
保证线程互斥：使得同一时刻只有一个线程可以访问被 synchronized 修饰的代码块或方法。
保证可见性：确保一个线程对共享变量的修改，其他线程可以立即看到。
避免数据不一致：通过对共享资源加锁，防止数据竞争和并发修改导致的不一致问题。
3. synchronized 的使用方式
synchronized 可以修饰方法或代码块。

（1）修饰实例方法
当 synchronized 修饰实例方法时，锁定的是当前实例对象（this）。

代码示例：

java
复制
编辑
class Counter {
    private int count = 0;

    // 使用 synchronized 修饰实例方法
    public synchronized void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

public class SynchronizedExample {
    public static void main(String[] args) {
        Counter counter = new Counter();
        
        // 创建多个线程同时调用 increment 方法
        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // 输出最终的 count 值
        System.out.println("Final count: " + counter.getCount());
    }
}
输出：

yaml
复制
编辑
Final count: 2000
在这个例子中，increment() 方法被 synchronized 修饰，保证了同一时刻只有一个线程能够执行该方法，从而避免了两个线程同时修改 count 导致的线程安全问题。
（2）修饰静态方法
当 synchronized 修饰静态方法时，锁定的是类对象，而不是实例对象。

代码示例：

java
复制
编辑
class StaticCounter {
    private static int count = 0;

    // 使用 synchronized 修饰静态方法
    public synchronized static void increment() {
        count++;
    }

    public static int getCount() {
        return count;
    }
}

public class SynchronizedStaticExample {
    public static void main(String[] args) {
        // 创建多个线程同时调用静态方法 increment
        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                StaticCounter.increment();
            }
        });

        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                StaticCounter.increment();
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // 输出最终的 count 值
        System.out.println("Final count: " + StaticCounter.getCount());
    }
}
输出：

yaml
复制
编辑
Final count: 2000
在这个例子中，increment() 方法是静态的，使用 synchronized 修饰时，锁定的是 StaticCounter.class 类对象，而不是实例对象。这样，即使是不同实例的线程，也会同步执行这个静态方法。
（3）修饰代码块
synchronized 还可以用来修饰代码块，这样可以更细粒度地控制锁的范围，只对共享资源的访问部分加锁，而不是整个方法。

代码示例：

java
复制
编辑
class CounterWithBlock {
    private int count = 0;

    public void increment() {
        synchronized (this) {  // 只同步这块代码
            count++;
        }
    }

    public int getCount() {
        return count;
    }
}

public class SynchronizedBlockExample {
    public static void main(String[] args) {
        CounterWithBlock counter = new CounterWithBlock();
        
        // 创建多个线程同时调用 increment 方法
        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 1000; i++) {
                counter.increment();
            }
        });

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // 输出最终的 count 值
        System.out.println("Final count: " + counter.getCount());
    }
}
输出：

yaml
复制
编辑
Final count: 2000
在这个例子中，increment() 方法中的代码块被 synchronized 修饰，表示只有访问 count 变量的代码段是同步的，这样其他部分的代码不会被锁住，从而提高了效率。
4. synchronized 的工作原理
锁的机制：synchronized 关键字利用 互斥锁（mutex）来控制对共享资源的访问。每当一个线程进入同步代码块或同步方法时，它会获得锁；其他线程如果想访问同步资源，则必须等到当前线程释放锁。

对象锁与类锁：

对于实例方法，锁定的是当前实例对象（this）。
对于静态方法，锁定的是类对象（Class 对象）。
5. 注意事项
死锁：如果多个线程互相等待对方释放锁，可能导致死锁。为了避免死锁，可以遵循一定的锁获取顺序，或者使用 ReentrantLock 替代 synchronized 进行更灵活的锁管理。

性能问题：由于每次进入同步代码块时都需要获取锁，可能会导致性能开销，特别是在高并发场景下。如果锁的粒度过大，可能影响程序的执行效率。

synchronized 和 volatile 的区别：

synchronized 保证了互斥性和可见性，并且保证了锁的顺序性。
volatile 只保证可见性，不能保证互斥性。
6. 总结
synchronized 用于保证多线程环境下的线程安全，通过互斥锁机制确保同一时刻只有一个线程访问同步代码块。
可以修饰实例方法、静态方法、以及代码块，修饰不同内容时，锁的对象不同。
注意合理使用 synchronized，避免死锁和性能瓶颈。
